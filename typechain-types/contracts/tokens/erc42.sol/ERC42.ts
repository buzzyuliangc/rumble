/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ERC42Interface extends utils.Interface {
  functions: {
    "expirationDate(uint256)": FunctionFragment;
    "tokenBurnAuth()": FunctionFragment;
    "tokenIssuer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "expirationDate" | "tokenBurnAuth" | "tokenIssuer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "expirationDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBurnAuth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIssuer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "expirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBurnAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIssuer",
    data: BytesLike
  ): Result;

  events: {
    "Issued(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
}

export interface IssuedEventObject {
  _from: string;
  _to: string;
  _tokenId: BigNumber;
  _expirationDate: BigNumber;
}
export type IssuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  IssuedEventObject
>;

export type IssuedEventFilter = TypedEventFilter<IssuedEvent>;

export interface ERC42 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC42Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    expirationDate(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenBurnAuth(overrides?: CallOverrides): Promise<[number]>;

    tokenIssuer(
      overrides?: CallOverrides
    ): Promise<[string] & { _tokenIssuer: string }>;
  };

  expirationDate(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenBurnAuth(overrides?: CallOverrides): Promise<number>;

  tokenIssuer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    expirationDate(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBurnAuth(overrides?: CallOverrides): Promise<number>;

    tokenIssuer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Issued(address,address,uint256,uint256)"(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _expirationDate?: null
    ): IssuedEventFilter;
    Issued(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _expirationDate?: null
    ): IssuedEventFilter;
  };

  estimateGas: {
    expirationDate(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBurnAuth(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIssuer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    expirationDate(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBurnAuth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIssuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
