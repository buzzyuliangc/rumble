/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SupportsInterface,
  SupportsInterfaceInterface,
} from "../../../../contracts/utils/supports-interface.sol/SupportsInterface";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506301ffc9a760e01b60009081526020527f67be87c3ff9960ca1e9cfac5cab2ff4747269cf9ed20c9b7306235ac35a491c5805460ff1916600117905561010d8061005c6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b603c60383660046087565b6050565b6040516047919060cc565b60405180910390f35b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526020819052604090205460ff1690565b6000602082840312156097578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811460c5578182fd5b9392505050565b90151581526020019056fea264697066735822122089b34d07a365469213454798a8ff59b3e03faf321ba3f8445928c824e5ac363764736f6c63430008000033";

type SupportsInterfaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SupportsInterfaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SupportsInterface__factory extends ContractFactory {
  constructor(...args: SupportsInterfaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SupportsInterface> {
    return super.deploy(overrides || {}) as Promise<SupportsInterface>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SupportsInterface {
    return super.attach(address) as SupportsInterface;
  }
  override connect(signer: Signer): SupportsInterface__factory {
    return super.connect(signer) as SupportsInterface__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SupportsInterfaceInterface {
    return new utils.Interface(_abi) as SupportsInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SupportsInterface {
    return new Contract(address, _abi, signerOrProvider) as SupportsInterface;
  }
}
