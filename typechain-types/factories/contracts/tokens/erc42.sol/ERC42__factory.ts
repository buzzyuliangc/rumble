/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ERC42,
  ERC42Interface,
} from "../../../../contracts/tokens/erc42.sol/ERC42";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_expirationDate",
        type: "uint256",
      },
    ],
    name: "Issued",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "expirationDate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenBurnAuth",
    outputs: [
      {
        internalType: "enum ERC42.BurnAuth",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenIssuer",
    outputs: [
      {
        internalType: "address",
        name: "_tokenIssuer",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ERC42__factory {
  static readonly abi = _abi;
  static createInterface(): ERC42Interface {
    return new utils.Interface(_abi) as ERC42Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC42 {
    return new Contract(address, _abi, signerOrProvider) as ERC42;
  }
}
