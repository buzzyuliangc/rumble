/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AddressUtilsMock,
  AddressUtilsMockInterface,
} from "../../../../tests/mocks/address-utils-mock.sol/AddressUtilsMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "isContract",
    outputs: [
      {
        internalType: "bool",
        name: "addressCheck",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610121806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80631627905514602d575b600080fd5b603c603836600460b0565b6050565b604051901515815260200160405180910390f35b6000606f8273ffffffffffffffffffffffffffffffffffffffff166075565b92915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470811580159060a85750808214155b949350505050565b60006020828403121560c157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811460e457600080fd5b939250505056fea2646970667358221220a6a7d26b82ba4231c48d1b0c9146d34ae4d32b017a40e46ce6f6b80e483dc50864736f6c63430008090033";

type AddressUtilsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressUtilsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressUtilsMock__factory extends ContractFactory {
  constructor(...args: AddressUtilsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AddressUtilsMock> {
    return super.deploy(overrides || {}) as Promise<AddressUtilsMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AddressUtilsMock {
    return super.attach(address) as AddressUtilsMock;
  }
  override connect(signer: Signer): AddressUtilsMock__factory {
    return super.connect(signer) as AddressUtilsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressUtilsMockInterface {
    return new utils.Interface(_abi) as AddressUtilsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressUtilsMock {
    return new Contract(address, _abi, signerOrProvider) as AddressUtilsMock;
  }
}
