/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SendsToSelfOnConstruct,
  SendsToSelfOnConstructInterface,
} from "../../../../tests/mocks/sends-to-self-on-construct.sol/SendsToSelfOnConstruct";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Received",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600060405161001f90610109565b604051809103906000f08015801561003b573d6000803e3d6000fd5b506040516340c10f1960e01b81529091506001600160a01b038216906340c10f199061006e90309060019060040161013a565b600060405180830381600087803b15801561008857600080fd5b505af115801561009c573d6000803e3d6000fd5b5050604051632142170760e11b81526001600160a01b03841692506342842e0e91506100d19030908190600190600401610116565b600060405180830381600087803b1580156100eb57600080fd5b505af11580156100ff573d6000803e3d6000fd5b5050505050610153565b6113dc8061033383390190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6101d1806101626000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004361003e3660046100d8565b610059565b604051610050919061016e565b60405180910390f35b6040516000907f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b908290a1507f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100d357600080fd5b919050565b6000806000806000608086880312156100ef578081fd5b6100f8866100af565b9450610106602087016100af565b935060408601359250606086013567ffffffffffffffff80821115610129578283fd5b818801915088601f83011261013c578283fd5b81358181111561014a578384fd5b89602082850101111561015b578384fd5b9699959850939650602001949392505050565b7fffffffff000000000000000000000000000000000000000000000000000000009190911681526020019056fea2646970667358221220ea1dd1b754ccba0cab8f6f28eac0b8c0a41e6bb1f745ef05a014ce4c8cf932ad64736f6c63430008000033608060405234801561001057600080fd5b50600060208190527f67be87c3ff9960ca1e9cfac5cab2ff4747269cf9ed20c9b7306235ac35a491c5805460ff1990811660019081179092556380ac58cd60e01b9092527ff7815fccbf112960a73756e185887fedcb9fc64ca0a16cc5923b7960ed7808008054909216179055600580546001600160a01b0319163317905561133e8061009e6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063b88d4fde11610066578063b88d4fde146101f4578063e985e9c514610207578063f2fde38b1461021a578063f3fe3bc31461022d576100f5565b806370a08231146101a4578063860d248a146101c45780638da5cb5b146101d9578063a22cb465146101e1576100f5565b806323b872dd116100d357806323b872dd1461015857806340c10f191461016b57806342842e0e1461017e5780636352211e14610191576100f5565b806301ffc9a7146100fa578063081812fc14610123578063095ea7b314610143575b600080fd5b61010d610108366004611167565b610235565b60405161011a9190611252565b60405180910390f35b61013661013136600461119f565b610270565b60405161011a9190611202565b61015661015136600461113e565b6102f2565b005b610156610166366004611033565b6104c2565b61015661017936600461113e565b61067d565b61015661018c366004611033565b6106d5565b61013661019f36600461119f565b6106f5565b6101b76101b2366004610fe0565b61074d565b60405161011a9190611270565b6101cc6107a4565b60405161011a919061125d565b6101366107c6565b6101566101ef366004611104565b6107d5565b61015661020236600461106e565b610844565b61010d610215366004611001565b61088d565b610156610228366004610fe0565b6108bb565b6101cc6109a6565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604090205460ff165b919050565b6000818152600160209081526040808320548151808301909252600682526518181998181960d11b9282019290925283916001600160a01b03166102d05760405162461bcd60e51b81526004016102c7919061125d565b60405180910390fd5b506000838152600260205260409020546001600160a01b031691505b50919050565b60008181526001602052604090205481906001600160a01b03163381148061033d57506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b6040518060400160405280600681526020017f3030333030330000000000000000000000000000000000000000000000000000815250906103915760405162461bcd60e51b81526004016102c7919061125d565b50600083815260016020908152604091829020548251808401909352600683526518181998181960d11b918301919091528491906001600160a01b03166103eb5760405162461bcd60e51b81526004016102c7919061125d565b50600084815260016020908152604091829020548251808401909352600683527f3030333030380000000000000000000000000000000000000000000000000000918301919091526001600160a01b03908116919087168214156104625760405162461bcd60e51b81526004016102c7919061125d565b5060008581526002602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b60008181526001602052604090205481906001600160a01b03163381148061050057506000828152600260205260409020546001600160a01b031633145b8061052e57506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b604051806040016040528060068152602001650c0c0ccc0c0d60d21b8152509061056b5760405162461bcd60e51b81526004016102c7919061125d565b50600083815260016020908152604091829020548251808401909352600683526518181998181960d11b918301919091528491906001600160a01b03166105c55760405162461bcd60e51b81526004016102c7919061125d565b50600084815260016020908152604091829020548251808401909352600683526530303330303760d01b918301919091526001600160a01b039081169190881682146106245760405162461bcd60e51b81526004016102c7919061125d565b5060408051808201909152600681526530303330303160d01b60208201526001600160a01b0387166106695760405162461bcd60e51b81526004016102c7919061125d565b5061067486866109c8565b50505050505050565b60055460408051808201909152600681526530313830303160d01b6020820152906001600160a01b031633146106c65760405162461bcd60e51b81526004016102c7919061125d565b506106d18282610a43565b5050565b6106f083838360405180602001604052806000815250610b26565b505050565b600081815260016020908152604091829020548251808401909352600683526518181998181960d11b918301919091526001600160a01b031690816102ec5760405162461bcd60e51b81526004016102c7919061125d565b60408051808201909152600681526530303330303160d01b60208201526000906001600160a01b0383166107945760405162461bcd60e51b81526004016102c7919061125d565b5061079e82610e03565b92915050565b6040518060400160405280600681526020016518189c18181960d11b81525081565b6005546001600160a01b031681565b3360008181526004602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610838908590611252565b60405180910390a35050565b61088685858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b2692505050565b5050505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b60055460408051808201909152600681526530313830303160d01b6020820152906001600160a01b031633146109045760405162461bcd60e51b81526004016102c7919061125d565b5060408051808201909152600681526518189c18181960d11b60208201526001600160a01b0382166109495760405162461bcd60e51b81526004016102c7919061125d565b506005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6040518060400160405280600681526020016530313830303160d01b81525081565b6000818152600160205260409020546001600160a01b03166109e982610e1e565b6109f38183610e3c565b6109fd8383610ee5565b81836001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60408051808201909152600681526530303330303160d01b60208201526001600160a01b038316610a875760405162461bcd60e51b81526004016102c7919061125d565b50600081815260016020908152604091829020548251808401909352600683526518181998181b60d11b918301919091526001600160a01b031615610adf5760405162461bcd60e51b81526004016102c7919061125d565b50610aea8282610ee5565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008281526001602052604090205482906001600160a01b031633811480610b6457506000828152600260205260409020546001600160a01b031633145b80610b9257506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b604051806040016040528060068152602001650c0c0ccc0c0d60d21b81525090610bcf5760405162461bcd60e51b81526004016102c7919061125d565b50600084815260016020908152604091829020548251808401909352600683526518181998181960d11b918301919091528591906001600160a01b0316610c295760405162461bcd60e51b81526004016102c7919061125d565b50600085815260016020908152604091829020548251808401909352600683526530303330303760d01b918301919091526001600160a01b03908116919089168214610c885760405162461bcd60e51b81526004016102c7919061125d565b5060408051808201909152600681526530303330303160d01b60208201526001600160a01b038816610ccd5760405162461bcd60e51b81526004016102c7919061125d565b50610cd887876109c8565b610cea876001600160a01b0316610f8d565b15610df957604051630a85bd0160e11b81526000906001600160a01b0389169063150b7a0290610d249033908d908c908c90600401611216565b602060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190611183565b60408051808201909152600681527f303033303035000000000000000000000000000000000000000000000000000060208201529091507fffffffff000000000000000000000000000000000000000000000000000000008216630a85bd0160e11b14610df65760405162461bcd60e51b81526004016102c7919061125d565b50505b5050505050505050565b6001600160a01b031660009081526003602052604090205490565b600090815260026020526040902080546001600160a01b0319169055565b600081815260016020908152604091829020548251808401909352600683526530303330303760d01b918301919091526001600160a01b03848116911614610e975760405162461bcd60e51b81526004016102c7919061125d565b506001600160a01b0382166000908152600360205260408120805460019290610ec1908490611291565b9091555050600090815260016020526040902080546001600160a01b031916905550565b600081815260016020908152604091829020548251808401909352600683526518181998181b60d11b918301919091526001600160a01b031615610f3c5760405162461bcd60e51b81526004016102c7919061125d565b50600081815260016020818152604080842080546001600160a01b0319166001600160a01b038816908117909155845260039091528220805491929091610f84908490611279565b90915550505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708115801590610fc15750808214155b949350505050565b80356001600160a01b038116811461026b57600080fd5b600060208284031215610ff1578081fd5b610ffa82610fc9565b9392505050565b60008060408385031215611013578081fd5b61101c83610fc9565b915061102a60208401610fc9565b90509250929050565b600080600060608486031215611047578081fd5b61105084610fc9565b925061105e60208501610fc9565b9150604084013590509250925092565b600080600080600060808688031215611085578081fd5b61108e86610fc9565b945061109c60208701610fc9565b935060408601359250606086013567ffffffffffffffff808211156110bf578283fd5b818801915088601f8301126110d2578283fd5b8135818111156110e0578384fd5b8960208285010111156110f1578384fd5b9699959850939650602001949392505050565b60008060408385031215611116578182fd5b61111f83610fc9565b915060208301358015158114611133578182fd5b809150509250929050565b60008060408385031215611150578182fd5b61115983610fc9565b946020939093013593505050565b600060208284031215611178578081fd5b8135610ffa816112d7565b600060208284031215611194578081fd5b8151610ffa816112d7565b6000602082840312156111b0578081fd5b5035919050565b60008151808452815b818110156111dc576020818501810151868301820152016111c0565b818111156111ed5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261124860808301846111b7565b9695505050505050565b901515815260200190565b600060208252610ffa60208301846111b7565b90815260200190565b6000821982111561128c5761128c6112a8565b500190565b6000828210156112a3576112a36112a8565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461130557600080fd5b5056fea26469706673582212200382c613c0aa24a7c626b31b140587347c4a1431a4b075d2ba8feb0af176b90f64736f6c63430008000033";

type SendsToSelfOnConstructConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SendsToSelfOnConstructConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SendsToSelfOnConstruct__factory extends ContractFactory {
  constructor(...args: SendsToSelfOnConstructConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SendsToSelfOnConstruct> {
    return super.deploy(overrides || {}) as Promise<SendsToSelfOnConstruct>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SendsToSelfOnConstruct {
    return super.attach(address) as SendsToSelfOnConstruct;
  }
  override connect(signer: Signer): SendsToSelfOnConstruct__factory {
    return super.connect(signer) as SendsToSelfOnConstruct__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SendsToSelfOnConstructInterface {
    return new utils.Interface(_abi) as SendsToSelfOnConstructInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SendsToSelfOnConstruct {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SendsToSelfOnConstruct;
  }
}
