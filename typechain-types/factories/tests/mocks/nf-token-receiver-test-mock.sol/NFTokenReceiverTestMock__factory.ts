/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NFTokenReceiverTestMock,
  NFTokenReceiverTestMockInterface,
} from "../../../../tests/mocks/nf-token-receiver-test-mock.sol/NFTokenReceiverTestMock";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "Received",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101c8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004361003e3660046100f7565b610078565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b6040516000907f544c765b33ca411cce832250371569244f765a17fcd217832be093f0fd5fa45b908290a1507f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100f257600080fd5b919050565b60008060008060006080868803121561010f57600080fd5b610118866100ce565b9450610126602087016100ce565b935060408601359250606086013567ffffffffffffffff8082111561014a57600080fd5b818801915088601f83011261015e57600080fd5b81358181111561016d57600080fd5b89602082850101111561017f57600080fd5b969995985093965060200194939250505056fea2646970667358221220de7541f0ff080b9e3c5b8cea4e6a92bd5b490bdaefbcf37ddc6f63930e740c1b64736f6c63430008090033";

type NFTokenReceiverTestMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTokenReceiverTestMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTokenReceiverTestMock__factory extends ContractFactory {
  constructor(...args: NFTokenReceiverTestMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NFTokenReceiverTestMock> {
    return super.deploy(overrides || {}) as Promise<NFTokenReceiverTestMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTokenReceiverTestMock {
    return super.attach(address) as NFTokenReceiverTestMock;
  }
  override connect(signer: Signer): NFTokenReceiverTestMock__factory {
    return super.connect(signer) as NFTokenReceiverTestMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTokenReceiverTestMockInterface {
    return new utils.Interface(_abi) as NFTokenReceiverTestMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTokenReceiverTestMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as NFTokenReceiverTestMock;
  }
}
